import sys
import numpy as np
import pandas as pd
import openpyxl
from datetime import datetime, timedelta

#----------------构造DataFrame，指向数据源----------------

#源文件的绝对路径
s01 = "C:\\Users\\FRANCES_JIANG\\Desktop\\Work\\5.CTB\\data_source\\CTB.xlsx"
s02 = "C:\\Users\\FRANCES_JIANG\\Desktop\\Work\\5.CTB\\data_source\\ACES.xlsx"
s03 = "C:\\Users\\FRANCES_JIANG\\Desktop\\Work\\5.CTB\\data_source\\PIRT.xlsx"

#源文件中需要的工作表的名称
#wb1 = "Demand CTB All"
#wb2 = "Download_E85"
#wb3 = "PIRT Requests"

#----------------
#----------------数据源ACES处理----------------
#----------------

#读取ACES工作簿
with pd.ExcelFile(s02) as x02:
    ws2 = pd.read_excel(x02, usecols = ["SCIPN", "ACES ID", "ACES Status"], sheet_name = "Download_E85")  #读取指定工作表（按名称）

#ACES_STEP_01：创建ACES副本，读取行，除“Closed” & “Already Shipped”开头的行外
ws2_after = ws2.copy()  #深拷贝，（操作副本ws2_after不会改变ws2）
ws2_after = ws2_after[(True ^ ws2_after["ACES Status"].isin(["Closed Successfully", "Closed-By Plant Request", "Closed Unsuccessful", "Already Shipped"]))]  #剔除不要的行
ws2_after.sort_values(by = ["SCIPN", "ACES ID"], ascending = [True, False], inplace = True)  #按2列排序，原地替换

#ACES_STEP_02：ACES副本去重操作，只留最新的ACES ID
ws2_after.drop_duplicates(subset = ["SCIPN"], keep = "first", inplace = True)  #每个料号，只保留最新的ACES所在行（first小写）

#ACES_STEP_03：修改料号的列名为Component
#ws2_after.rename(columns = {"SCIPN" : "Component"}, inplace = True)  #直接替换原列名

#检查内存使用情况
#print(ws2_after.info(memory_usage = "deep"))
#for dtype in ["float64", "int64", "object", "datetime64[ns]"]:
#    selected_dtype = ws2_after.select_dtypes(include = [dtype])
#    mean_usage_b = selected_dtype.memory_usage(deep = True).mean()
#    mean_usage_mb = mean_usage_b / 1024 ** 2
#    print("Average memory usage for {} columns: {:03.2f} MB".format(dtype, mean_usage_mb))

#int_types = ["int8", "int16", "int32", "int64"]
#for it in int_types:
#    print(np.iinfo(it))

#----------------
#----------------数据源PIRT处理----------------
#----------------

#读取PIRT工作簿
with pd.ExcelFile(s03) as x03:
    ws3 = pd.read_excel(x03, usecols=["Request P/N", "Post Date"], sheet_name = "PIRT Requests")  #读取指定工作表的指定行（按名称）

#PIRT_STEP_01：创建PIRT副本，只留今天前91天内的行
ws3_after = ws3.copy()  #深拷贝dt64.astype(datetime.datetime)
e_date = datetime.now()  #获取今天日期
s_date = e_date - timedelta(days = 90)  #获取90天前的日期
#if str(ws3_after["Post Date"].dtype) != "datetime":  #判断该列是否全为日期时间类型
ws3_after["Post Date"] = pd.to_datetime(ws3_after["Post Date"])  #若不是（一般是datetime64），就强制转换为日期时间类型
ws3_after = ws3_after[(ws3_after["Post Date"] >= s_date) & (ws3_after["Post Date"] <= e_date)]  #保留91天内的行

#PIRT_STEP_02:新增一列，默认值为Y，方便之后merge进CTB
ws3_after["Checking Internal Plant"] = "Y"
#print(ws3_after[:3])  #查看输出，用于调试
#print(ws3_after.info())  #查看输出，用于调试

#PIRT_STEP_03：修改料号的列名为Component
#ws3_after.rename(columns = {"Request P/N" : "Component"}, inplace = True)  #直接替换原列名

#----------------
#----------------结果报表CTB处理----------------
#----------------

#指向CTB工作簿
with pd.ExcelFile(s01) as x01:
    ws1 = pd.read_excel(x01, usecols = ["Component"], sheet_name = "Demand CTB All")  #读取指定工作表（按名称）

#CTB_STEP_01:Merge ACES_ID to CTB_Report
ws2_after = ws2_after[["ACES ID", "SCIPN"]]
ws1 = ws1.merge(ws2_after, how = "left", left_on = "Component", right_on = "SCIPN", sort = False)

#CTB_STEP_02:Merge PIRT to CTB_Report
ws3_after = ws3_after[["Request P/N", "Checking Internal Plant"]]
ws1 = ws1.merge(ws3_after, how = "left", left_on = "Component", right_on = "Request P/N", sort = False)

#CTB_STEP_03:对数据域进行剪枝&改列名，只留需要的2列
ws1.drop(["Component", "SCIPN", "Request P/N"], axis = 1, inplace = True)  #剪枝，删除不要的列
ws1.rename(columns = {"ACES ID": "ACES#"}, inplace = True)  #改列名
print(ws1.info())
print(ws1.info())

#CTB_STEP_04:将数据域导出到CTB.xlsx（直接覆盖）
writer = pd.ExcelWriter(s01, engine = "openpyxl")
ws1.to_excel(writer, sheet_name = "Integrated", header = True, index = False, startcol = 44, startrow = 0)  #写到最后
writer.save()  #数据导入真实excel文件
writer.close()
